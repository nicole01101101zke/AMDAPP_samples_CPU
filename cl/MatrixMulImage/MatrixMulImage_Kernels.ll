; ModuleID = '../AMDAPP_samples/cl/MatrixMulImage/MatrixMulImage_Kernels.cl'
source_filename = "../AMDAPP_samples/cl/MatrixMulImage/MatrixMulImage_Kernels.cl"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%opencl.image2d_ro_t = type opaque
%opencl.image2d_wo_t = type opaque
%opencl.sampler_t = type opaque

; Function Attrs: convergent nounwind uwtable
define dso_local spir_kernel void @mmmKernel(%opencl.image2d_ro_t* %0, %opencl.image2d_ro_t* %1, %opencl.image2d_wo_t* %2, i32 %3, i32 %4) local_unnamed_addr #0 !kernel_arg_addr_space !3 !kernel_arg_access_qual !4 !kernel_arg_type !5 !kernel_arg_base_type !5 !kernel_arg_type_qual !6 {
  %6 = tail call i64 @_Z13get_global_idj(i32 0) #6
  %7 = trunc i64 %6 to i32
  %8 = insertelement <2 x i32> undef, i32 %7, i32 0
  %9 = tail call i64 @_Z13get_global_idj(i32 1) #6
  %10 = trunc i64 %9 to i32
  %11 = icmp eq i32 %3, 0
  %12 = shl i32 %10, 2
  %13 = or i32 %12, 1
  %14 = or i32 %12, 2
  %15 = or i32 %12, 3
  br i1 %11, label %16, label %29

16:                                               ; preds = %29, %5
  %17 = phi <4 x float> [ zeroinitializer, %5 ], [ %215, %29 ]
  %18 = phi <4 x float> [ zeroinitializer, %5 ], [ %183, %29 ]
  %19 = phi <4 x float> [ zeroinitializer, %5 ], [ %151, %29 ]
  %20 = phi <4 x float> [ zeroinitializer, %5 ], [ %119, %29 ]
  %21 = insertelement <2 x i32> %8, i32 %12, i32 1
  %22 = bitcast <2 x i32> %21 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %22, <4 x float> %20) #7
  %23 = insertelement <2 x i32> %8, i32 %13, i32 1
  %24 = bitcast <2 x i32> %23 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %24, <4 x float> %19) #7
  %25 = insertelement <2 x i32> %8, i32 %14, i32 1
  %26 = bitcast <2 x i32> %25 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %26, <4 x float> %18) #7
  %27 = insertelement <2 x i32> %8, i32 %15, i32 1
  %28 = bitcast <2 x i32> %27 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %28, <4 x float> %17) #7
  ret void

29:                                               ; preds = %5, %29
  %30 = phi <4 x float> [ %119, %29 ], [ zeroinitializer, %5 ]
  %31 = phi <4 x float> [ %151, %29 ], [ zeroinitializer, %5 ]
  %32 = phi <4 x float> [ %183, %29 ], [ zeroinitializer, %5 ]
  %33 = phi <4 x float> [ %215, %29 ], [ zeroinitializer, %5 ]
  %34 = phi i32 [ %216, %29 ], [ 0, %5 ]
  %35 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %36 = lshr exact i32 %34, 2
  %37 = insertelement <2 x i32> undef, i32 %36, i32 0
  %38 = insertelement <2 x i32> %37, i32 %12, i32 1
  %39 = bitcast <2 x i32> %38 to double
  %40 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %35, double %39) #9
  %41 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %42 = insertelement <2 x i32> %37, i32 %13, i32 1
  %43 = bitcast <2 x i32> %42 to double
  %44 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %41, double %43) #9
  %45 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %46 = insertelement <2 x i32> %37, i32 %14, i32 1
  %47 = bitcast <2 x i32> %46 to double
  %48 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %45, double %47) #9
  %49 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %50 = insertelement <2 x i32> %37, i32 %15, i32 1
  %51 = bitcast <2 x i32> %50 to double
  %52 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %49, double %51) #9
  %53 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %54 = insertelement <2 x i32> %8, i32 %34, i32 1
  %55 = bitcast <2 x i32> %54 to double
  %56 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %53, double %55) #9
  %57 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %58 = or i32 %34, 1
  %59 = insertelement <2 x i32> %8, i32 %58, i32 1
  %60 = bitcast <2 x i32> %59 to double
  %61 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %57, double %60) #9
  %62 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %63 = or i32 %34, 2
  %64 = insertelement <2 x i32> %8, i32 %63, i32 1
  %65 = bitcast <2 x i32> %64 to double
  %66 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %62, double %65) #9
  %67 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %68 = or i32 %34, 3
  %69 = insertelement <2 x i32> %8, i32 %68, i32 1
  %70 = bitcast <2 x i32> %69 to double
  %71 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %67, double %70) #9
  %72 = extractelement <4 x float> %40, i64 0
  %73 = extractelement <4 x float> %56, i64 0
  %74 = extractelement <4 x float> %40, i64 1
  %75 = extractelement <4 x float> %61, i64 0
  %76 = fmul float %74, %75
  %77 = tail call float @llvm.fmuladd.f32(float %72, float %73, float %76)
  %78 = extractelement <4 x float> %40, i64 2
  %79 = extractelement <4 x float> %66, i64 0
  %80 = tail call float @llvm.fmuladd.f32(float %78, float %79, float %77)
  %81 = extractelement <4 x float> %40, i64 3
  %82 = extractelement <4 x float> %71, i64 0
  %83 = tail call float @llvm.fmuladd.f32(float %81, float %82, float %80)
  %84 = extractelement <4 x float> %30, i64 0
  %85 = fadd float %84, %83
  %86 = insertelement <4 x float> undef, float %85, i64 0
  %87 = extractelement <4 x float> %56, i64 1
  %88 = extractelement <4 x float> %61, i64 1
  %89 = fmul float %74, %88
  %90 = tail call float @llvm.fmuladd.f32(float %72, float %87, float %89)
  %91 = extractelement <4 x float> %66, i64 1
  %92 = tail call float @llvm.fmuladd.f32(float %78, float %91, float %90)
  %93 = extractelement <4 x float> %71, i64 1
  %94 = tail call float @llvm.fmuladd.f32(float %81, float %93, float %92)
  %95 = extractelement <4 x float> %30, i64 1
  %96 = fadd float %95, %94
  %97 = insertelement <4 x float> %86, float %96, i64 1
  %98 = extractelement <4 x float> %56, i64 2
  %99 = extractelement <4 x float> %61, i64 2
  %100 = fmul float %74, %99
  %101 = tail call float @llvm.fmuladd.f32(float %72, float %98, float %100)
  %102 = extractelement <4 x float> %66, i64 2
  %103 = tail call float @llvm.fmuladd.f32(float %78, float %102, float %101)
  %104 = extractelement <4 x float> %71, i64 2
  %105 = tail call float @llvm.fmuladd.f32(float %81, float %104, float %103)
  %106 = extractelement <4 x float> %30, i64 2
  %107 = fadd float %106, %105
  %108 = insertelement <4 x float> %97, float %107, i64 2
  %109 = extractelement <4 x float> %56, i64 3
  %110 = extractelement <4 x float> %61, i64 3
  %111 = fmul float %74, %110
  %112 = tail call float @llvm.fmuladd.f32(float %72, float %109, float %111)
  %113 = extractelement <4 x float> %66, i64 3
  %114 = tail call float @llvm.fmuladd.f32(float %78, float %113, float %112)
  %115 = extractelement <4 x float> %71, i64 3
  %116 = tail call float @llvm.fmuladd.f32(float %81, float %115, float %114)
  %117 = extractelement <4 x float> %30, i64 3
  %118 = fadd float %117, %116
  %119 = insertelement <4 x float> %108, float %118, i64 3
  %120 = extractelement <4 x float> %44, i64 0
  %121 = extractelement <4 x float> %44, i64 1
  %122 = fmul float %121, %75
  %123 = tail call float @llvm.fmuladd.f32(float %120, float %73, float %122)
  %124 = extractelement <4 x float> %44, i64 2
  %125 = tail call float @llvm.fmuladd.f32(float %124, float %79, float %123)
  %126 = extractelement <4 x float> %44, i64 3
  %127 = tail call float @llvm.fmuladd.f32(float %126, float %82, float %125)
  %128 = extractelement <4 x float> %31, i64 0
  %129 = fadd float %128, %127
  %130 = insertelement <4 x float> undef, float %129, i64 0
  %131 = fmul float %121, %88
  %132 = tail call float @llvm.fmuladd.f32(float %120, float %87, float %131)
  %133 = tail call float @llvm.fmuladd.f32(float %124, float %91, float %132)
  %134 = tail call float @llvm.fmuladd.f32(float %126, float %93, float %133)
  %135 = extractelement <4 x float> %31, i64 1
  %136 = fadd float %135, %134
  %137 = insertelement <4 x float> %130, float %136, i64 1
  %138 = fmul float %121, %99
  %139 = tail call float @llvm.fmuladd.f32(float %120, float %98, float %138)
  %140 = tail call float @llvm.fmuladd.f32(float %124, float %102, float %139)
  %141 = tail call float @llvm.fmuladd.f32(float %126, float %104, float %140)
  %142 = extractelement <4 x float> %31, i64 2
  %143 = fadd float %142, %141
  %144 = insertelement <4 x float> %137, float %143, i64 2
  %145 = fmul float %121, %110
  %146 = tail call float @llvm.fmuladd.f32(float %120, float %109, float %145)
  %147 = tail call float @llvm.fmuladd.f32(float %124, float %113, float %146)
  %148 = tail call float @llvm.fmuladd.f32(float %126, float %115, float %147)
  %149 = extractelement <4 x float> %31, i64 3
  %150 = fadd float %149, %148
  %151 = insertelement <4 x float> %144, float %150, i64 3
  %152 = extractelement <4 x float> %48, i64 0
  %153 = extractelement <4 x float> %48, i64 1
  %154 = fmul float %153, %75
  %155 = tail call float @llvm.fmuladd.f32(float %152, float %73, float %154)
  %156 = extractelement <4 x float> %48, i64 2
  %157 = tail call float @llvm.fmuladd.f32(float %156, float %79, float %155)
  %158 = extractelement <4 x float> %48, i64 3
  %159 = tail call float @llvm.fmuladd.f32(float %158, float %82, float %157)
  %160 = extractelement <4 x float> %32, i64 0
  %161 = fadd float %160, %159
  %162 = insertelement <4 x float> undef, float %161, i64 0
  %163 = fmul float %153, %88
  %164 = tail call float @llvm.fmuladd.f32(float %152, float %87, float %163)
  %165 = tail call float @llvm.fmuladd.f32(float %156, float %91, float %164)
  %166 = tail call float @llvm.fmuladd.f32(float %158, float %93, float %165)
  %167 = extractelement <4 x float> %32, i64 1
  %168 = fadd float %167, %166
  %169 = insertelement <4 x float> %162, float %168, i64 1
  %170 = fmul float %153, %99
  %171 = tail call float @llvm.fmuladd.f32(float %152, float %98, float %170)
  %172 = tail call float @llvm.fmuladd.f32(float %156, float %102, float %171)
  %173 = tail call float @llvm.fmuladd.f32(float %158, float %104, float %172)
  %174 = extractelement <4 x float> %32, i64 2
  %175 = fadd float %174, %173
  %176 = insertelement <4 x float> %169, float %175, i64 2
  %177 = fmul float %153, %110
  %178 = tail call float @llvm.fmuladd.f32(float %152, float %109, float %177)
  %179 = tail call float @llvm.fmuladd.f32(float %156, float %113, float %178)
  %180 = tail call float @llvm.fmuladd.f32(float %158, float %115, float %179)
  %181 = extractelement <4 x float> %32, i64 3
  %182 = fadd float %181, %180
  %183 = insertelement <4 x float> %176, float %182, i64 3
  %184 = extractelement <4 x float> %52, i64 0
  %185 = extractelement <4 x float> %52, i64 1
  %186 = fmul float %185, %75
  %187 = tail call float @llvm.fmuladd.f32(float %184, float %73, float %186)
  %188 = extractelement <4 x float> %52, i64 2
  %189 = tail call float @llvm.fmuladd.f32(float %188, float %79, float %187)
  %190 = extractelement <4 x float> %52, i64 3
  %191 = tail call float @llvm.fmuladd.f32(float %190, float %82, float %189)
  %192 = extractelement <4 x float> %33, i64 0
  %193 = fadd float %192, %191
  %194 = insertelement <4 x float> undef, float %193, i64 0
  %195 = fmul float %185, %88
  %196 = tail call float @llvm.fmuladd.f32(float %184, float %87, float %195)
  %197 = tail call float @llvm.fmuladd.f32(float %188, float %91, float %196)
  %198 = tail call float @llvm.fmuladd.f32(float %190, float %93, float %197)
  %199 = extractelement <4 x float> %33, i64 1
  %200 = fadd float %199, %198
  %201 = insertelement <4 x float> %194, float %200, i64 1
  %202 = fmul float %185, %99
  %203 = tail call float @llvm.fmuladd.f32(float %184, float %98, float %202)
  %204 = tail call float @llvm.fmuladd.f32(float %188, float %102, float %203)
  %205 = tail call float @llvm.fmuladd.f32(float %190, float %104, float %204)
  %206 = extractelement <4 x float> %33, i64 2
  %207 = fadd float %206, %205
  %208 = insertelement <4 x float> %201, float %207, i64 2
  %209 = fmul float %185, %110
  %210 = tail call float @llvm.fmuladd.f32(float %184, float %109, float %209)
  %211 = tail call float @llvm.fmuladd.f32(float %188, float %113, float %210)
  %212 = tail call float @llvm.fmuladd.f32(float %190, float %115, float %211)
  %213 = extractelement <4 x float> %33, i64 3
  %214 = fadd float %213, %212
  %215 = insertelement <4 x float> %208, float %214, i64 3
  %216 = add nuw nsw i32 %34, 4
  %217 = icmp ult i32 %216, %3
  br i1 %217, label %29, label %16
}

; Function Attrs: convergent nounwind readnone
declare dso_local i64 @_Z13get_global_idj(i32) local_unnamed_addr #1

; Function Attrs: convergent nounwind readonly
declare dso_local <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t*, %opencl.sampler_t*, double) local_unnamed_addr #2

declare dso_local %opencl.sampler_t* @__translate_sampler_initializer(i32) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #3

; Function Attrs: convergent
declare dso_local void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t*, double, <4 x float>) local_unnamed_addr #4

; Function Attrs: convergent nounwind uwtable
define dso_local spir_kernel void @mmmKernel2(%opencl.image2d_ro_t* %0, %opencl.image2d_ro_t* %1, %opencl.image2d_wo_t* %2, i32 %3, i32 %4) local_unnamed_addr #0 !kernel_arg_addr_space !3 !kernel_arg_access_qual !4 !kernel_arg_type !5 !kernel_arg_base_type !5 !kernel_arg_type_qual !6 {
  %6 = tail call i64 @_Z13get_global_idj(i32 0) #6
  %7 = trunc i64 %6 to i32
  %8 = insertelement <2 x i32> undef, i32 %7, i32 0
  %9 = tail call i64 @_Z13get_global_idj(i32 1) #6
  %10 = trunc i64 %9 to i32
  %11 = icmp eq i32 %3, 0
  %12 = shl i32 %10, 3
  %13 = or i32 %12, 1
  %14 = or i32 %12, 2
  %15 = or i32 %12, 3
  %16 = or i32 %12, 4
  %17 = or i32 %12, 5
  %18 = or i32 %12, 6
  %19 = or i32 %12, 7
  br i1 %11, label %20, label %45

20:                                               ; preds = %45, %5
  %21 = phi <4 x float> [ zeroinitializer, %5 ], [ %379, %45 ]
  %22 = phi <4 x float> [ zeroinitializer, %5 ], [ %347, %45 ]
  %23 = phi <4 x float> [ zeroinitializer, %5 ], [ %315, %45 ]
  %24 = phi <4 x float> [ zeroinitializer, %5 ], [ %283, %45 ]
  %25 = phi <4 x float> [ zeroinitializer, %5 ], [ %251, %45 ]
  %26 = phi <4 x float> [ zeroinitializer, %5 ], [ %219, %45 ]
  %27 = phi <4 x float> [ zeroinitializer, %5 ], [ %187, %45 ]
  %28 = phi <4 x float> [ zeroinitializer, %5 ], [ %155, %45 ]
  %29 = insertelement <2 x i32> %8, i32 %12, i32 1
  %30 = bitcast <2 x i32> %29 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %30, <4 x float> %28) #7
  %31 = insertelement <2 x i32> %8, i32 %13, i32 1
  %32 = bitcast <2 x i32> %31 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %32, <4 x float> %27) #7
  %33 = insertelement <2 x i32> %8, i32 %14, i32 1
  %34 = bitcast <2 x i32> %33 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %34, <4 x float> %26) #7
  %35 = insertelement <2 x i32> %8, i32 %15, i32 1
  %36 = bitcast <2 x i32> %35 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %36, <4 x float> %25) #7
  %37 = insertelement <2 x i32> %8, i32 %16, i32 1
  %38 = bitcast <2 x i32> %37 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %38, <4 x float> %24) #7
  %39 = insertelement <2 x i32> %8, i32 %17, i32 1
  %40 = bitcast <2 x i32> %39 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %40, <4 x float> %23) #7
  %41 = insertelement <2 x i32> %8, i32 %18, i32 1
  %42 = bitcast <2 x i32> %41 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %42, <4 x float> %22) #7
  %43 = insertelement <2 x i32> %8, i32 %19, i32 1
  %44 = bitcast <2 x i32> %43 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %44, <4 x float> %21) #7
  ret void

45:                                               ; preds = %5, %45
  %46 = phi <4 x float> [ %155, %45 ], [ zeroinitializer, %5 ]
  %47 = phi <4 x float> [ %187, %45 ], [ zeroinitializer, %5 ]
  %48 = phi <4 x float> [ %219, %45 ], [ zeroinitializer, %5 ]
  %49 = phi <4 x float> [ %251, %45 ], [ zeroinitializer, %5 ]
  %50 = phi <4 x float> [ %283, %45 ], [ zeroinitializer, %5 ]
  %51 = phi <4 x float> [ %315, %45 ], [ zeroinitializer, %5 ]
  %52 = phi <4 x float> [ %347, %45 ], [ zeroinitializer, %5 ]
  %53 = phi <4 x float> [ %379, %45 ], [ zeroinitializer, %5 ]
  %54 = phi i32 [ %380, %45 ], [ 0, %5 ]
  %55 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %56 = lshr exact i32 %54, 2
  %57 = insertelement <2 x i32> undef, i32 %56, i32 0
  %58 = insertelement <2 x i32> %57, i32 %12, i32 1
  %59 = bitcast <2 x i32> %58 to double
  %60 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %55, double %59) #9
  %61 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %62 = insertelement <2 x i32> %57, i32 %13, i32 1
  %63 = bitcast <2 x i32> %62 to double
  %64 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %61, double %63) #9
  %65 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %66 = insertelement <2 x i32> %57, i32 %14, i32 1
  %67 = bitcast <2 x i32> %66 to double
  %68 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %65, double %67) #9
  %69 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %70 = insertelement <2 x i32> %57, i32 %15, i32 1
  %71 = bitcast <2 x i32> %70 to double
  %72 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %69, double %71) #9
  %73 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %74 = insertelement <2 x i32> %57, i32 %16, i32 1
  %75 = bitcast <2 x i32> %74 to double
  %76 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %73, double %75) #9
  %77 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %78 = insertelement <2 x i32> %57, i32 %17, i32 1
  %79 = bitcast <2 x i32> %78 to double
  %80 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %77, double %79) #9
  %81 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %82 = insertelement <2 x i32> %57, i32 %18, i32 1
  %83 = bitcast <2 x i32> %82 to double
  %84 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %81, double %83) #9
  %85 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %86 = insertelement <2 x i32> %57, i32 %19, i32 1
  %87 = bitcast <2 x i32> %86 to double
  %88 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %85, double %87) #9
  %89 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %90 = insertelement <2 x i32> %8, i32 %54, i32 1
  %91 = bitcast <2 x i32> %90 to double
  %92 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %89, double %91) #9
  %93 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %94 = or i32 %54, 1
  %95 = insertelement <2 x i32> %8, i32 %94, i32 1
  %96 = bitcast <2 x i32> %95 to double
  %97 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %93, double %96) #9
  %98 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %99 = or i32 %54, 2
  %100 = insertelement <2 x i32> %8, i32 %99, i32 1
  %101 = bitcast <2 x i32> %100 to double
  %102 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %98, double %101) #9
  %103 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %104 = or i32 %54, 3
  %105 = insertelement <2 x i32> %8, i32 %104, i32 1
  %106 = bitcast <2 x i32> %105 to double
  %107 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %103, double %106) #9
  %108 = extractelement <4 x float> %60, i64 0
  %109 = extractelement <4 x float> %92, i64 0
  %110 = extractelement <4 x float> %60, i64 1
  %111 = extractelement <4 x float> %97, i64 0
  %112 = fmul float %110, %111
  %113 = tail call float @llvm.fmuladd.f32(float %108, float %109, float %112)
  %114 = extractelement <4 x float> %60, i64 2
  %115 = extractelement <4 x float> %102, i64 0
  %116 = tail call float @llvm.fmuladd.f32(float %114, float %115, float %113)
  %117 = extractelement <4 x float> %60, i64 3
  %118 = extractelement <4 x float> %107, i64 0
  %119 = tail call float @llvm.fmuladd.f32(float %117, float %118, float %116)
  %120 = extractelement <4 x float> %46, i64 0
  %121 = fadd float %120, %119
  %122 = insertelement <4 x float> undef, float %121, i64 0
  %123 = extractelement <4 x float> %92, i64 1
  %124 = extractelement <4 x float> %97, i64 1
  %125 = fmul float %110, %124
  %126 = tail call float @llvm.fmuladd.f32(float %108, float %123, float %125)
  %127 = extractelement <4 x float> %102, i64 1
  %128 = tail call float @llvm.fmuladd.f32(float %114, float %127, float %126)
  %129 = extractelement <4 x float> %107, i64 1
  %130 = tail call float @llvm.fmuladd.f32(float %117, float %129, float %128)
  %131 = extractelement <4 x float> %46, i64 1
  %132 = fadd float %131, %130
  %133 = insertelement <4 x float> %122, float %132, i64 1
  %134 = extractelement <4 x float> %92, i64 2
  %135 = extractelement <4 x float> %97, i64 2
  %136 = fmul float %110, %135
  %137 = tail call float @llvm.fmuladd.f32(float %108, float %134, float %136)
  %138 = extractelement <4 x float> %102, i64 2
  %139 = tail call float @llvm.fmuladd.f32(float %114, float %138, float %137)
  %140 = extractelement <4 x float> %107, i64 2
  %141 = tail call float @llvm.fmuladd.f32(float %117, float %140, float %139)
  %142 = extractelement <4 x float> %46, i64 2
  %143 = fadd float %142, %141
  %144 = insertelement <4 x float> %133, float %143, i64 2
  %145 = extractelement <4 x float> %92, i64 3
  %146 = extractelement <4 x float> %97, i64 3
  %147 = fmul float %110, %146
  %148 = tail call float @llvm.fmuladd.f32(float %108, float %145, float %147)
  %149 = extractelement <4 x float> %102, i64 3
  %150 = tail call float @llvm.fmuladd.f32(float %114, float %149, float %148)
  %151 = extractelement <4 x float> %107, i64 3
  %152 = tail call float @llvm.fmuladd.f32(float %117, float %151, float %150)
  %153 = extractelement <4 x float> %46, i64 3
  %154 = fadd float %153, %152
  %155 = insertelement <4 x float> %144, float %154, i64 3
  %156 = extractelement <4 x float> %64, i64 0
  %157 = extractelement <4 x float> %64, i64 1
  %158 = fmul float %157, %111
  %159 = tail call float @llvm.fmuladd.f32(float %156, float %109, float %158)
  %160 = extractelement <4 x float> %64, i64 2
  %161 = tail call float @llvm.fmuladd.f32(float %160, float %115, float %159)
  %162 = extractelement <4 x float> %64, i64 3
  %163 = tail call float @llvm.fmuladd.f32(float %162, float %118, float %161)
  %164 = extractelement <4 x float> %47, i64 0
  %165 = fadd float %164, %163
  %166 = insertelement <4 x float> undef, float %165, i64 0
  %167 = fmul float %157, %124
  %168 = tail call float @llvm.fmuladd.f32(float %156, float %123, float %167)
  %169 = tail call float @llvm.fmuladd.f32(float %160, float %127, float %168)
  %170 = tail call float @llvm.fmuladd.f32(float %162, float %129, float %169)
  %171 = extractelement <4 x float> %47, i64 1
  %172 = fadd float %171, %170
  %173 = insertelement <4 x float> %166, float %172, i64 1
  %174 = fmul float %157, %135
  %175 = tail call float @llvm.fmuladd.f32(float %156, float %134, float %174)
  %176 = tail call float @llvm.fmuladd.f32(float %160, float %138, float %175)
  %177 = tail call float @llvm.fmuladd.f32(float %162, float %140, float %176)
  %178 = extractelement <4 x float> %47, i64 2
  %179 = fadd float %178, %177
  %180 = insertelement <4 x float> %173, float %179, i64 2
  %181 = fmul float %157, %146
  %182 = tail call float @llvm.fmuladd.f32(float %156, float %145, float %181)
  %183 = tail call float @llvm.fmuladd.f32(float %160, float %149, float %182)
  %184 = tail call float @llvm.fmuladd.f32(float %162, float %151, float %183)
  %185 = extractelement <4 x float> %47, i64 3
  %186 = fadd float %185, %184
  %187 = insertelement <4 x float> %180, float %186, i64 3
  %188 = extractelement <4 x float> %68, i64 0
  %189 = extractelement <4 x float> %68, i64 1
  %190 = fmul float %189, %111
  %191 = tail call float @llvm.fmuladd.f32(float %188, float %109, float %190)
  %192 = extractelement <4 x float> %68, i64 2
  %193 = tail call float @llvm.fmuladd.f32(float %192, float %115, float %191)
  %194 = extractelement <4 x float> %68, i64 3
  %195 = tail call float @llvm.fmuladd.f32(float %194, float %118, float %193)
  %196 = extractelement <4 x float> %48, i64 0
  %197 = fadd float %196, %195
  %198 = insertelement <4 x float> undef, float %197, i64 0
  %199 = fmul float %189, %124
  %200 = tail call float @llvm.fmuladd.f32(float %188, float %123, float %199)
  %201 = tail call float @llvm.fmuladd.f32(float %192, float %127, float %200)
  %202 = tail call float @llvm.fmuladd.f32(float %194, float %129, float %201)
  %203 = extractelement <4 x float> %48, i64 1
  %204 = fadd float %203, %202
  %205 = insertelement <4 x float> %198, float %204, i64 1
  %206 = fmul float %189, %135
  %207 = tail call float @llvm.fmuladd.f32(float %188, float %134, float %206)
  %208 = tail call float @llvm.fmuladd.f32(float %192, float %138, float %207)
  %209 = tail call float @llvm.fmuladd.f32(float %194, float %140, float %208)
  %210 = extractelement <4 x float> %48, i64 2
  %211 = fadd float %210, %209
  %212 = insertelement <4 x float> %205, float %211, i64 2
  %213 = fmul float %189, %146
  %214 = tail call float @llvm.fmuladd.f32(float %188, float %145, float %213)
  %215 = tail call float @llvm.fmuladd.f32(float %192, float %149, float %214)
  %216 = tail call float @llvm.fmuladd.f32(float %194, float %151, float %215)
  %217 = extractelement <4 x float> %48, i64 3
  %218 = fadd float %217, %216
  %219 = insertelement <4 x float> %212, float %218, i64 3
  %220 = extractelement <4 x float> %72, i64 0
  %221 = extractelement <4 x float> %72, i64 1
  %222 = fmul float %221, %111
  %223 = tail call float @llvm.fmuladd.f32(float %220, float %109, float %222)
  %224 = extractelement <4 x float> %72, i64 2
  %225 = tail call float @llvm.fmuladd.f32(float %224, float %115, float %223)
  %226 = extractelement <4 x float> %72, i64 3
  %227 = tail call float @llvm.fmuladd.f32(float %226, float %118, float %225)
  %228 = extractelement <4 x float> %49, i64 0
  %229 = fadd float %228, %227
  %230 = insertelement <4 x float> undef, float %229, i64 0
  %231 = fmul float %221, %124
  %232 = tail call float @llvm.fmuladd.f32(float %220, float %123, float %231)
  %233 = tail call float @llvm.fmuladd.f32(float %224, float %127, float %232)
  %234 = tail call float @llvm.fmuladd.f32(float %226, float %129, float %233)
  %235 = extractelement <4 x float> %49, i64 1
  %236 = fadd float %235, %234
  %237 = insertelement <4 x float> %230, float %236, i64 1
  %238 = fmul float %221, %135
  %239 = tail call float @llvm.fmuladd.f32(float %220, float %134, float %238)
  %240 = tail call float @llvm.fmuladd.f32(float %224, float %138, float %239)
  %241 = tail call float @llvm.fmuladd.f32(float %226, float %140, float %240)
  %242 = extractelement <4 x float> %49, i64 2
  %243 = fadd float %242, %241
  %244 = insertelement <4 x float> %237, float %243, i64 2
  %245 = fmul float %221, %146
  %246 = tail call float @llvm.fmuladd.f32(float %220, float %145, float %245)
  %247 = tail call float @llvm.fmuladd.f32(float %224, float %149, float %246)
  %248 = tail call float @llvm.fmuladd.f32(float %226, float %151, float %247)
  %249 = extractelement <4 x float> %49, i64 3
  %250 = fadd float %249, %248
  %251 = insertelement <4 x float> %244, float %250, i64 3
  %252 = extractelement <4 x float> %76, i64 0
  %253 = extractelement <4 x float> %76, i64 1
  %254 = fmul float %253, %111
  %255 = tail call float @llvm.fmuladd.f32(float %252, float %109, float %254)
  %256 = extractelement <4 x float> %76, i64 2
  %257 = tail call float @llvm.fmuladd.f32(float %256, float %115, float %255)
  %258 = extractelement <4 x float> %76, i64 3
  %259 = tail call float @llvm.fmuladd.f32(float %258, float %118, float %257)
  %260 = extractelement <4 x float> %50, i64 0
  %261 = fadd float %260, %259
  %262 = insertelement <4 x float> undef, float %261, i64 0
  %263 = fmul float %253, %124
  %264 = tail call float @llvm.fmuladd.f32(float %252, float %123, float %263)
  %265 = tail call float @llvm.fmuladd.f32(float %256, float %127, float %264)
  %266 = tail call float @llvm.fmuladd.f32(float %258, float %129, float %265)
  %267 = extractelement <4 x float> %50, i64 1
  %268 = fadd float %267, %266
  %269 = insertelement <4 x float> %262, float %268, i64 1
  %270 = fmul float %253, %135
  %271 = tail call float @llvm.fmuladd.f32(float %252, float %134, float %270)
  %272 = tail call float @llvm.fmuladd.f32(float %256, float %138, float %271)
  %273 = tail call float @llvm.fmuladd.f32(float %258, float %140, float %272)
  %274 = extractelement <4 x float> %50, i64 2
  %275 = fadd float %274, %273
  %276 = insertelement <4 x float> %269, float %275, i64 2
  %277 = fmul float %253, %146
  %278 = tail call float @llvm.fmuladd.f32(float %252, float %145, float %277)
  %279 = tail call float @llvm.fmuladd.f32(float %256, float %149, float %278)
  %280 = tail call float @llvm.fmuladd.f32(float %258, float %151, float %279)
  %281 = extractelement <4 x float> %50, i64 3
  %282 = fadd float %281, %280
  %283 = insertelement <4 x float> %276, float %282, i64 3
  %284 = extractelement <4 x float> %80, i64 0
  %285 = extractelement <4 x float> %80, i64 1
  %286 = fmul float %285, %111
  %287 = tail call float @llvm.fmuladd.f32(float %284, float %109, float %286)
  %288 = extractelement <4 x float> %80, i64 2
  %289 = tail call float @llvm.fmuladd.f32(float %288, float %115, float %287)
  %290 = extractelement <4 x float> %80, i64 3
  %291 = tail call float @llvm.fmuladd.f32(float %290, float %118, float %289)
  %292 = extractelement <4 x float> %51, i64 0
  %293 = fadd float %292, %291
  %294 = insertelement <4 x float> undef, float %293, i64 0
  %295 = fmul float %285, %124
  %296 = tail call float @llvm.fmuladd.f32(float %284, float %123, float %295)
  %297 = tail call float @llvm.fmuladd.f32(float %288, float %127, float %296)
  %298 = tail call float @llvm.fmuladd.f32(float %290, float %129, float %297)
  %299 = extractelement <4 x float> %51, i64 1
  %300 = fadd float %299, %298
  %301 = insertelement <4 x float> %294, float %300, i64 1
  %302 = fmul float %285, %135
  %303 = tail call float @llvm.fmuladd.f32(float %284, float %134, float %302)
  %304 = tail call float @llvm.fmuladd.f32(float %288, float %138, float %303)
  %305 = tail call float @llvm.fmuladd.f32(float %290, float %140, float %304)
  %306 = extractelement <4 x float> %51, i64 2
  %307 = fadd float %306, %305
  %308 = insertelement <4 x float> %301, float %307, i64 2
  %309 = fmul float %285, %146
  %310 = tail call float @llvm.fmuladd.f32(float %284, float %145, float %309)
  %311 = tail call float @llvm.fmuladd.f32(float %288, float %149, float %310)
  %312 = tail call float @llvm.fmuladd.f32(float %290, float %151, float %311)
  %313 = extractelement <4 x float> %51, i64 3
  %314 = fadd float %313, %312
  %315 = insertelement <4 x float> %308, float %314, i64 3
  %316 = extractelement <4 x float> %84, i64 0
  %317 = extractelement <4 x float> %84, i64 1
  %318 = fmul float %317, %111
  %319 = tail call float @llvm.fmuladd.f32(float %316, float %109, float %318)
  %320 = extractelement <4 x float> %84, i64 2
  %321 = tail call float @llvm.fmuladd.f32(float %320, float %115, float %319)
  %322 = extractelement <4 x float> %84, i64 3
  %323 = tail call float @llvm.fmuladd.f32(float %322, float %118, float %321)
  %324 = extractelement <4 x float> %52, i64 0
  %325 = fadd float %324, %323
  %326 = insertelement <4 x float> undef, float %325, i64 0
  %327 = fmul float %317, %124
  %328 = tail call float @llvm.fmuladd.f32(float %316, float %123, float %327)
  %329 = tail call float @llvm.fmuladd.f32(float %320, float %127, float %328)
  %330 = tail call float @llvm.fmuladd.f32(float %322, float %129, float %329)
  %331 = extractelement <4 x float> %52, i64 1
  %332 = fadd float %331, %330
  %333 = insertelement <4 x float> %326, float %332, i64 1
  %334 = fmul float %317, %135
  %335 = tail call float @llvm.fmuladd.f32(float %316, float %134, float %334)
  %336 = tail call float @llvm.fmuladd.f32(float %320, float %138, float %335)
  %337 = tail call float @llvm.fmuladd.f32(float %322, float %140, float %336)
  %338 = extractelement <4 x float> %52, i64 2
  %339 = fadd float %338, %337
  %340 = insertelement <4 x float> %333, float %339, i64 2
  %341 = fmul float %317, %146
  %342 = tail call float @llvm.fmuladd.f32(float %316, float %145, float %341)
  %343 = tail call float @llvm.fmuladd.f32(float %320, float %149, float %342)
  %344 = tail call float @llvm.fmuladd.f32(float %322, float %151, float %343)
  %345 = extractelement <4 x float> %52, i64 3
  %346 = fadd float %345, %344
  %347 = insertelement <4 x float> %340, float %346, i64 3
  %348 = extractelement <4 x float> %88, i64 0
  %349 = extractelement <4 x float> %88, i64 1
  %350 = fmul float %349, %111
  %351 = tail call float @llvm.fmuladd.f32(float %348, float %109, float %350)
  %352 = extractelement <4 x float> %88, i64 2
  %353 = tail call float @llvm.fmuladd.f32(float %352, float %115, float %351)
  %354 = extractelement <4 x float> %88, i64 3
  %355 = tail call float @llvm.fmuladd.f32(float %354, float %118, float %353)
  %356 = extractelement <4 x float> %53, i64 0
  %357 = fadd float %356, %355
  %358 = insertelement <4 x float> undef, float %357, i64 0
  %359 = fmul float %349, %124
  %360 = tail call float @llvm.fmuladd.f32(float %348, float %123, float %359)
  %361 = tail call float @llvm.fmuladd.f32(float %352, float %127, float %360)
  %362 = tail call float @llvm.fmuladd.f32(float %354, float %129, float %361)
  %363 = extractelement <4 x float> %53, i64 1
  %364 = fadd float %363, %362
  %365 = insertelement <4 x float> %358, float %364, i64 1
  %366 = fmul float %349, %135
  %367 = tail call float @llvm.fmuladd.f32(float %348, float %134, float %366)
  %368 = tail call float @llvm.fmuladd.f32(float %352, float %138, float %367)
  %369 = tail call float @llvm.fmuladd.f32(float %354, float %140, float %368)
  %370 = extractelement <4 x float> %53, i64 2
  %371 = fadd float %370, %369
  %372 = insertelement <4 x float> %365, float %371, i64 2
  %373 = fmul float %349, %146
  %374 = tail call float @llvm.fmuladd.f32(float %348, float %145, float %373)
  %375 = tail call float @llvm.fmuladd.f32(float %352, float %149, float %374)
  %376 = tail call float @llvm.fmuladd.f32(float %354, float %151, float %375)
  %377 = extractelement <4 x float> %53, i64 3
  %378 = fadd float %377, %376
  %379 = insertelement <4 x float> %372, float %378, i64 3
  %380 = add nuw nsw i32 %54, 4
  %381 = icmp ult i32 %380, %3
  br i1 %381, label %45, label %20
}

; Function Attrs: convergent nounwind readnone uwtable
define dso_local <4 x float> @mat_mult_mini(<4 x float> %0, <4 x float> %1, <4 x float> %2, <4 x float> %3, <4 x float> %4, <4 x float> %5) local_unnamed_addr #5 {
  %7 = shufflevector <4 x float> %0, <4 x float> undef, <4 x i32> zeroinitializer
  %8 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %7, <4 x float> %1, <4 x float> %5) #6
  %9 = shufflevector <4 x float> %0, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %10 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %9, <4 x float> %2, <4 x float> %8) #6
  %11 = shufflevector <4 x float> %0, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %12 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %11, <4 x float> %3, <4 x float> %10) #6
  %13 = shufflevector <4 x float> %0, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %14 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %13, <4 x float> %4, <4 x float> %12) #6
  ret <4 x float> %14
}

; Function Attrs: convergent nounwind readnone
declare dso_local <4 x float> @_Z3madDv4_fS_S_(<4 x float>, <4 x float>, <4 x float>) local_unnamed_addr #1

; Function Attrs: convergent nounwind readnone uwtable
define dso_local <4 x float> @mat_mult_pre(<4 x float> %0, <4 x float> %1, <4 x float> %2, <4 x float> %3, <4 x float> %4) local_unnamed_addr #5 {
  %6 = shufflevector <4 x float> %0, <4 x float> undef, <4 x i32> zeroinitializer
  %7 = fmul <4 x float> %6, %1
  %8 = shufflevector <4 x float> %0, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %9 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %8, <4 x float> %2, <4 x float> %7) #6
  %10 = shufflevector <4 x float> %0, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %11 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %10, <4 x float> %3, <4 x float> %9) #6
  %12 = shufflevector <4 x float> %0, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %13 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %12, <4 x float> %4, <4 x float> %11) #6
  ret <4 x float> %13
}

; Function Attrs: convergent nounwind uwtable
define dso_local spir_kernel void @mmmKernel3(%opencl.image2d_ro_t* %0, %opencl.image2d_ro_t* %1, %opencl.image2d_wo_t* %2, i32 %3, i32 %4) local_unnamed_addr #0 !kernel_arg_addr_space !3 !kernel_arg_access_qual !4 !kernel_arg_type !5 !kernel_arg_base_type !5 !kernel_arg_type_qual !6 {
  %6 = tail call i64 @_Z13get_global_idj(i32 0) #6
  %7 = trunc i64 %6 to i32
  %8 = insertelement <2 x i32> undef, i32 %7, i32 0
  %9 = tail call i64 @_Z13get_global_idj(i32 1) #6
  %10 = trunc i64 %9 to i32
  %11 = shl i32 %10, 3
  %12 = insertelement <8 x i32> undef, i32 %11, i32 0
  %13 = shufflevector <8 x i32> %12, <8 x i32> undef, <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
  %14 = add <8 x i32> %13, <i32 undef, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %16 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %11, i32 1
  %17 = bitcast <2 x i32> %16 to double
  %18 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %15, double %17) #9
  %19 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %20 = extractelement <8 x i32> %14, i64 1
  %21 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %20, i32 1
  %22 = bitcast <2 x i32> %21 to double
  %23 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %19, double %22) #9
  %24 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %25 = extractelement <8 x i32> %14, i64 2
  %26 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %25, i32 1
  %27 = bitcast <2 x i32> %26 to double
  %28 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %24, double %27) #9
  %29 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %30 = extractelement <8 x i32> %14, i64 3
  %31 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %30, i32 1
  %32 = bitcast <2 x i32> %31 to double
  %33 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %29, double %32) #9
  %34 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %35 = extractelement <8 x i32> %14, i64 4
  %36 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %35, i32 1
  %37 = bitcast <2 x i32> %36 to double
  %38 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %34, double %37) #9
  %39 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %40 = extractelement <8 x i32> %14, i64 5
  %41 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %40, i32 1
  %42 = bitcast <2 x i32> %41 to double
  %43 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %39, double %42) #9
  %44 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %45 = extractelement <8 x i32> %14, i64 6
  %46 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %45, i32 1
  %47 = bitcast <2 x i32> %46 to double
  %48 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %44, double %47) #9
  %49 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %50 = extractelement <8 x i32> %14, i64 7
  %51 = insertelement <2 x i32> <i32 0, i32 undef>, i32 %50, i32 1
  %52 = bitcast <2 x i32> %51 to double
  %53 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %49, double %52) #9
  %54 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %55 = insertelement <2 x i32> %8, i32 0, i32 1
  %56 = bitcast <2 x i32> %55 to double
  %57 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %54, double %56) #9
  %58 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %59 = insertelement <2 x i32> %8, i32 1, i32 1
  %60 = bitcast <2 x i32> %59 to double
  %61 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %58, double %60) #9
  %62 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %63 = insertelement <2 x i32> %8, i32 2, i32 1
  %64 = bitcast <2 x i32> %63 to double
  %65 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %62, double %64) #9
  %66 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %67 = insertelement <2 x i32> %8, i32 3, i32 1
  %68 = bitcast <2 x i32> %67 to double
  %69 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %66, double %68) #9
  %70 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %71 = fmul <4 x float> %70, %57
  %72 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %73 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %72, <4 x float> %61, <4 x float> %71) #6
  %74 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %75 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %74, <4 x float> %65, <4 x float> %73) #6
  %76 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %77 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %76, <4 x float> %69, <4 x float> %75) #6
  %78 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %79 = fmul <4 x float> %78, %57
  %80 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %81 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %80, <4 x float> %61, <4 x float> %79) #6
  %82 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %83 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %82, <4 x float> %65, <4 x float> %81) #6
  %84 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %85 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %84, <4 x float> %69, <4 x float> %83) #6
  %86 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %87 = fmul <4 x float> %86, %57
  %88 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %89 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %88, <4 x float> %61, <4 x float> %87) #6
  %90 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %91 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %90, <4 x float> %65, <4 x float> %89) #6
  %92 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %93 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %92, <4 x float> %69, <4 x float> %91) #6
  %94 = shufflevector <4 x float> %33, <4 x float> undef, <4 x i32> zeroinitializer
  %95 = fmul <4 x float> %94, %57
  %96 = shufflevector <4 x float> %33, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %97 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %96, <4 x float> %61, <4 x float> %95) #6
  %98 = shufflevector <4 x float> %33, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %99 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %98, <4 x float> %65, <4 x float> %97) #6
  %100 = shufflevector <4 x float> %33, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %101 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %100, <4 x float> %69, <4 x float> %99) #6
  %102 = shufflevector <4 x float> %38, <4 x float> undef, <4 x i32> zeroinitializer
  %103 = fmul <4 x float> %102, %57
  %104 = shufflevector <4 x float> %38, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %105 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %104, <4 x float> %61, <4 x float> %103) #6
  %106 = shufflevector <4 x float> %38, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %107 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %106, <4 x float> %65, <4 x float> %105) #6
  %108 = shufflevector <4 x float> %38, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %109 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %108, <4 x float> %69, <4 x float> %107) #6
  %110 = shufflevector <4 x float> %43, <4 x float> undef, <4 x i32> zeroinitializer
  %111 = fmul <4 x float> %110, %57
  %112 = shufflevector <4 x float> %43, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %113 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %112, <4 x float> %61, <4 x float> %111) #6
  %114 = shufflevector <4 x float> %43, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %115 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %114, <4 x float> %65, <4 x float> %113) #6
  %116 = shufflevector <4 x float> %43, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %117 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %116, <4 x float> %69, <4 x float> %115) #6
  %118 = shufflevector <4 x float> %48, <4 x float> undef, <4 x i32> zeroinitializer
  %119 = fmul <4 x float> %118, %57
  %120 = shufflevector <4 x float> %48, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %121 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %120, <4 x float> %61, <4 x float> %119) #6
  %122 = shufflevector <4 x float> %48, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %123 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %122, <4 x float> %65, <4 x float> %121) #6
  %124 = shufflevector <4 x float> %48, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %125 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %124, <4 x float> %69, <4 x float> %123) #6
  %126 = shufflevector <4 x float> %53, <4 x float> undef, <4 x i32> zeroinitializer
  %127 = fmul <4 x float> %126, %57
  %128 = shufflevector <4 x float> %53, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %129 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %128, <4 x float> %61, <4 x float> %127) #6
  %130 = shufflevector <4 x float> %53, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %131 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %130, <4 x float> %65, <4 x float> %129) #6
  %132 = shufflevector <4 x float> %53, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %133 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %132, <4 x float> %69, <4 x float> %131) #6
  %134 = icmp ugt i32 %3, 4
  br i1 %134, label %160, label %135

135:                                              ; preds = %160, %5
  %136 = phi <4 x float> [ %133, %5 ], [ %289, %160 ]
  %137 = phi <4 x float> [ %125, %5 ], [ %281, %160 ]
  %138 = phi <4 x float> [ %117, %5 ], [ %273, %160 ]
  %139 = phi <4 x float> [ %109, %5 ], [ %265, %160 ]
  %140 = phi <4 x float> [ %101, %5 ], [ %257, %160 ]
  %141 = phi <4 x float> [ %93, %5 ], [ %249, %160 ]
  %142 = phi <4 x float> [ %85, %5 ], [ %241, %160 ]
  %143 = phi <4 x float> [ %77, %5 ], [ %233, %160 ]
  %144 = insertelement <2 x i32> %8, i32 %11, i32 1
  %145 = bitcast <2 x i32> %144 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %145, <4 x float> %143) #7
  %146 = insertelement <2 x i32> %8, i32 %20, i32 1
  %147 = bitcast <2 x i32> %146 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %147, <4 x float> %142) #7
  %148 = insertelement <2 x i32> %8, i32 %25, i32 1
  %149 = bitcast <2 x i32> %148 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %149, <4 x float> %141) #7
  %150 = insertelement <2 x i32> %8, i32 %30, i32 1
  %151 = bitcast <2 x i32> %150 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %151, <4 x float> %140) #7
  %152 = insertelement <2 x i32> %8, i32 %35, i32 1
  %153 = bitcast <2 x i32> %152 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %153, <4 x float> %139) #7
  %154 = insertelement <2 x i32> %8, i32 %40, i32 1
  %155 = bitcast <2 x i32> %154 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %155, <4 x float> %138) #7
  %156 = insertelement <2 x i32> %8, i32 %45, i32 1
  %157 = bitcast <2 x i32> %156 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %157, <4 x float> %137) #7
  %158 = insertelement <2 x i32> %8, i32 %50, i32 1
  %159 = bitcast <2 x i32> %158 to double
  tail call void @_Z12write_imagef14ocl_image2d_woDv2_iDv4_f(%opencl.image2d_wo_t* %2, double %159, <4 x float> %136) #7
  ret void

160:                                              ; preds = %5, %160
  %161 = phi <4 x float> [ %233, %160 ], [ %77, %5 ]
  %162 = phi <4 x float> [ %241, %160 ], [ %85, %5 ]
  %163 = phi <4 x float> [ %249, %160 ], [ %93, %5 ]
  %164 = phi <4 x float> [ %257, %160 ], [ %101, %5 ]
  %165 = phi <4 x float> [ %265, %160 ], [ %109, %5 ]
  %166 = phi <4 x float> [ %273, %160 ], [ %117, %5 ]
  %167 = phi <4 x float> [ %281, %160 ], [ %125, %5 ]
  %168 = phi <4 x float> [ %289, %160 ], [ %133, %5 ]
  %169 = phi i32 [ %290, %160 ], [ 4, %5 ]
  %170 = lshr exact i32 %169, 2
  %171 = insertelement <4 x i32> undef, i32 %169, i32 0
  %172 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %173 = add <4 x i32> %172, <i32 undef, i32 1, i32 2, i32 3>
  %174 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %175 = insertelement <2 x i32> undef, i32 %170, i32 0
  %176 = insertelement <2 x i32> %175, i32 %11, i32 1
  %177 = bitcast <2 x i32> %176 to double
  %178 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %174, double %177) #9
  %179 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %180 = insertelement <2 x i32> %175, i32 %20, i32 1
  %181 = bitcast <2 x i32> %180 to double
  %182 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %179, double %181) #9
  %183 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %184 = insertelement <2 x i32> %175, i32 %25, i32 1
  %185 = bitcast <2 x i32> %184 to double
  %186 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %183, double %185) #9
  %187 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %188 = insertelement <2 x i32> %175, i32 %30, i32 1
  %189 = bitcast <2 x i32> %188 to double
  %190 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %187, double %189) #9
  %191 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %192 = insertelement <2 x i32> %8, i32 %169, i32 1
  %193 = bitcast <2 x i32> %192 to double
  %194 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %191, double %193) #9
  %195 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %196 = extractelement <4 x i32> %173, i64 1
  %197 = insertelement <2 x i32> %8, i32 %196, i32 1
  %198 = bitcast <2 x i32> %197 to double
  %199 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %195, double %198) #9
  %200 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %201 = extractelement <4 x i32> %173, i64 2
  %202 = insertelement <2 x i32> %8, i32 %201, i32 1
  %203 = bitcast <2 x i32> %202 to double
  %204 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %200, double %203) #9
  %205 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %206 = extractelement <4 x i32> %173, i64 3
  %207 = insertelement <2 x i32> %8, i32 %206, i32 1
  %208 = bitcast <2 x i32> %207 to double
  %209 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %1, %opencl.sampler_t* %205, double %208) #9
  %210 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %211 = insertelement <2 x i32> %175, i32 %35, i32 1
  %212 = bitcast <2 x i32> %211 to double
  %213 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %210, double %212) #9
  %214 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %215 = insertelement <2 x i32> %175, i32 %40, i32 1
  %216 = bitcast <2 x i32> %215 to double
  %217 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %214, double %216) #9
  %218 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %219 = insertelement <2 x i32> %175, i32 %45, i32 1
  %220 = bitcast <2 x i32> %219 to double
  %221 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %218, double %220) #9
  %222 = tail call %opencl.sampler_t* @__translate_sampler_initializer(i32 20) #8
  %223 = insertelement <2 x i32> %175, i32 %50, i32 1
  %224 = bitcast <2 x i32> %223 to double
  %225 = tail call <4 x float> @_Z11read_imagef14ocl_image2d_ro11ocl_samplerDv2_i(%opencl.image2d_ro_t* %0, %opencl.sampler_t* %222, double %224) #9
  %226 = shufflevector <4 x float> %178, <4 x float> undef, <4 x i32> zeroinitializer
  %227 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %226, <4 x float> %194, <4 x float> %161) #6
  %228 = shufflevector <4 x float> %178, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %229 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %228, <4 x float> %199, <4 x float> %227) #6
  %230 = shufflevector <4 x float> %178, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %231 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %230, <4 x float> %204, <4 x float> %229) #6
  %232 = shufflevector <4 x float> %178, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %233 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %232, <4 x float> %209, <4 x float> %231) #6
  %234 = shufflevector <4 x float> %182, <4 x float> undef, <4 x i32> zeroinitializer
  %235 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %234, <4 x float> %194, <4 x float> %162) #6
  %236 = shufflevector <4 x float> %182, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %237 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %236, <4 x float> %199, <4 x float> %235) #6
  %238 = shufflevector <4 x float> %182, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %239 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %238, <4 x float> %204, <4 x float> %237) #6
  %240 = shufflevector <4 x float> %182, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %241 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %240, <4 x float> %209, <4 x float> %239) #6
  %242 = shufflevector <4 x float> %186, <4 x float> undef, <4 x i32> zeroinitializer
  %243 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %242, <4 x float> %194, <4 x float> %163) #6
  %244 = shufflevector <4 x float> %186, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %245 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %244, <4 x float> %199, <4 x float> %243) #6
  %246 = shufflevector <4 x float> %186, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %247 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %246, <4 x float> %204, <4 x float> %245) #6
  %248 = shufflevector <4 x float> %186, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %249 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %248, <4 x float> %209, <4 x float> %247) #6
  %250 = shufflevector <4 x float> %190, <4 x float> undef, <4 x i32> zeroinitializer
  %251 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %250, <4 x float> %194, <4 x float> %164) #6
  %252 = shufflevector <4 x float> %190, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %253 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %252, <4 x float> %199, <4 x float> %251) #6
  %254 = shufflevector <4 x float> %190, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %255 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %254, <4 x float> %204, <4 x float> %253) #6
  %256 = shufflevector <4 x float> %190, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %257 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %256, <4 x float> %209, <4 x float> %255) #6
  %258 = shufflevector <4 x float> %213, <4 x float> undef, <4 x i32> zeroinitializer
  %259 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %258, <4 x float> %194, <4 x float> %165) #6
  %260 = shufflevector <4 x float> %213, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %261 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %260, <4 x float> %199, <4 x float> %259) #6
  %262 = shufflevector <4 x float> %213, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %263 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %262, <4 x float> %204, <4 x float> %261) #6
  %264 = shufflevector <4 x float> %213, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %265 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %264, <4 x float> %209, <4 x float> %263) #6
  %266 = shufflevector <4 x float> %217, <4 x float> undef, <4 x i32> zeroinitializer
  %267 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %266, <4 x float> %194, <4 x float> %166) #6
  %268 = shufflevector <4 x float> %217, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %269 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %268, <4 x float> %199, <4 x float> %267) #6
  %270 = shufflevector <4 x float> %217, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %271 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %270, <4 x float> %204, <4 x float> %269) #6
  %272 = shufflevector <4 x float> %217, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %273 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %272, <4 x float> %209, <4 x float> %271) #6
  %274 = shufflevector <4 x float> %221, <4 x float> undef, <4 x i32> zeroinitializer
  %275 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %274, <4 x float> %194, <4 x float> %167) #6
  %276 = shufflevector <4 x float> %221, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %277 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %276, <4 x float> %199, <4 x float> %275) #6
  %278 = shufflevector <4 x float> %221, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %279 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %278, <4 x float> %204, <4 x float> %277) #6
  %280 = shufflevector <4 x float> %221, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %281 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %280, <4 x float> %209, <4 x float> %279) #6
  %282 = shufflevector <4 x float> %225, <4 x float> undef, <4 x i32> zeroinitializer
  %283 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %282, <4 x float> %194, <4 x float> %168) #6
  %284 = shufflevector <4 x float> %225, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %285 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %284, <4 x float> %199, <4 x float> %283) #6
  %286 = shufflevector <4 x float> %225, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %287 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %286, <4 x float> %204, <4 x float> %285) #6
  %288 = shufflevector <4 x float> %225, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %289 = tail call <4 x float> @_Z3madDv4_fS_S_(<4 x float> %288, <4 x float> %209, <4 x float> %287) #6
  %290 = add nuw nsw i32 %169, 4
  %291 = icmp ult i32 %290, %3
  br i1 %291, label %160, label %135
}

attributes #0 = { convergent nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "uniform-work-group-size"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { convergent nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable willreturn }
attributes #4 = { convergent "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { convergent nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { convergent nounwind readnone }
attributes #7 = { convergent nounwind }
attributes #8 = { nounwind }
attributes #9 = { convergent nounwind readonly }

!llvm.module.flags = !{!0}
!opencl.ocl.version = !{!1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 2, i32 0}
!2 = !{!"clang version 10.0.0-4ubuntu1 "}
!3 = !{i32 1, i32 1, i32 1, i32 0, i32 0}
!4 = !{!"read_only", !"read_only", !"write_only", !"none", !"none"}
!5 = !{!"image2d_t", !"image2d_t", !"image2d_t", !"uint", !"uint"}
!6 = !{!"", !"", !"", !"", !""}
